//Libraries
#include <CapacitiveSensor.h>//https://github.com/PaulStoffregen/CapacitiveSensor
//Parameters
bool autocal 	= 0;
int value_2 = 0;
int value_3 = 0;
const int numReadings 	= 10;
long readings [numReadings];
int readIndex 	= 0;
long total 	= 0;
int LED_PIN = 5;
int LED_PIN_2 = 9;
int LED_PIN_3 = 10;
int value = 0;
const int sensitivity 	= 1000;
const int thresh 	= 200;
const int csStep 	= 10000;
CapacitiveSensor cs 	= CapacitiveSensor(2, 3);
void setup() {
 	//Init Serial USB
 	Serial.begin(9600);
 	Serial.println(F("Initialize System"));
  pinMode(LED_PIN, OUTPUT);
  pinMode(LED_PIN_2, OUTPUT);
  pinMode(LED_PIN_3, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  digitalWrite(LED_PIN_2, LOW);
  digitalWrite(LED_PIN_3, LOW);
 	//Init cs
 	if (autocal == 0) {
 			{
 					cs.set_CS_AutocaL_Millis(0xFFFFFFFF);
 			}
 	}
}
void loop() {

  value = smooth();
  if (value > 25000){
    value = 25000;
  }
  else if (value < 0){
    value = 25000;
  }
 	Serial.println(value);
  analogWrite(LED_PIN_2, (value / 157));
  if (value > 9000){
    value_2 = (value - 9000);
    analogWrite(LED_PIN, (value_2 / 157));
  }
  else{
    digitalWrite(LED_PIN, LOW);
  }
  if (value > 18000){
    value_3 = (value - 18000);
    analogWrite(LED_PIN_3, (value_3 / 157));
  }
  else{
    digitalWrite(LED_PIN_3, LOW);
  }
}
long smooth() { /* function smooth */
 	////Perform average on sensor readings
 	long average;
 	// subtract the last reading:
 	total = total - readings[readIndex];
 	// read the sensor:
 	readings[readIndex] = cs.capacitiveSensor(sensitivity);
 	// add value to total:
 	total = total + readings[readIndex];
 	// handle index
 	readIndex = readIndex + 1;
 	if (readIndex >= numReadings) {
 			readIndex = 0;
 	}
 	// calculate the average:
 	average = total / numReadings;
 	return average;
}
